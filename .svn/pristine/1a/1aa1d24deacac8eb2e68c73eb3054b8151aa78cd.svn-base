package br.com.gerenciador.amizade;

import java.util.*;

import br.com.gerenciador.colecao.Item;
import br.com.gerenciador.exceptions.AmigoNotFoundException;

/**
 * Classe para gerenciar o CRUD de amigos
 * 
 * Utiliza Singleton para controlar o número de 
 * instâncias dessa classe no sistema.
 * */
public class MeusAmigos {
	
	/**
	 * Instância do Repositório.
	 * */
	private static MeusAmigos instancia = null;

	/**
	 * Recupera a instância do Repositório, se a mesma ainda não
	 * tiver sido instanciada, chama-se o construtor e instancia
	 * antes de retornar.
	 * @return A instancia do Repositório.
	 * */
	public static MeusAmigos getInstancia() {
		if (instancia == null) {
			instancia = new MeusAmigos();
		}
		return instancia;
	}
	
	/**
	 * Lista de amigos do usuário
	 * */
	private Set<Amigo> amigos;
	
	/**
	 * Constrói um Repositório de amigos e
	 * inicializa a lista para armazenamento.
	 * */
	private MeusAmigos() {
		amigos = new HashSet<Amigo>();
	}
	/**
	 * Adiciona um novo amigo caso ele não esteja cadastrado
	 * @param amigo - amigo a ser adicionado
	 * @return True se o amigo foi adicionado com sucesso ou false caso contrário.
	 * */
	public boolean adicionarAmigo(Amigo amigo) {
		if (amigo == null) {
			return false;
		}
		return amigos.add(amigo);
	}
	
	/**
	 * Atribui a um amigo que ja esta cadastrado a lista de amigos novas caracteristicas
	 * @param antigo - amigo que vai ser editado
	 * @param novo - novas caracteristicas que serao atribuidas ao amigo
	 * @return True se o amigo foi editado com sucesso ou False caso contrário.
	 * */
	public boolean editarAmigo(Amigo antigo, Amigo novo) {
		if (amigos.remove(antigo)) {
			return amigos.add(novo);
		} else {
			return false;
		}
	}
	
	/**
	 * Remove o amigo caso esteja cadastrado, será removido 
	 * caso não esteja com algum item emprestado do usuário.
	 * @param amigo - amigo a ser removido
	 * @return True se o amigo foi removido com sucesso ou False caso contrário. 
	 * */
	public boolean removerAmigo(Amigo amigo) {
		Set<Item> itens = amigo.getItensEmprestados();
		
		if (itens.isEmpty()) {
			return amigos.remove(amigo);
		} else {
			System.out.println("Recolha os itens que estão com esse amigo antes de exclui-lo...");
			return false;
		}
	}
	
	/**
	 * Remove todos os amigos cadastrados na lista de amigos do usuário.
	 * @return True se removeu com sucesso ou False, caso contrário.
	 * */
	public boolean removerTodos() {
		return amigos.removeAll(amigos);
	}
	
	/**
	 * Metodo para verificar se um amigo esta cadastrado ou não
	 * @param amigo - amigo a ser pesquisado
	 * @return true se o amigo estiver cadastrado ou false caso contrário
	 * */
	public boolean pertence(Amigo amigo) {
		return amigos.contains(amigo);
	}
	
	/**
	 * Metodo para recuperar um amigo, recupera uma lista de
	 * amigos que tenham o nome informado.
	 * @param nome - nome do amigo
	 * @return Lista de amigos caso exista ao menos um.
	 * @throws AmigoNotFoundException caso o amigo não exista
	 * */
	public List<Amigo> getAmigo(String nome) throws AmigoNotFoundException {
		List<Amigo> lista = new ArrayList<>();
		
		for (Amigo amigo : amigos) {
			if (nome.equalsIgnoreCase(amigo.getNome())) {
				lista.add(amigo);
			}
		}
		if (lista.isEmpty()) {
			throw new AmigoNotFoundException();
		}
		return lista;
	}
	
	/**
	 * Representa a lista de amigos como String
	 * @return String de representação
	 * */
	@Override
	public String toString() {
		StringBuilder s = new StringBuilder();
		
		for (Amigo amigo : amigos) {
			s.append("\n" + amigo.toString() + "\n");
		}
		return s.toString();
	}
	
	/**
	 * Exibe as informações de todos os amigos
	 * */
	public void exibirAmigos() {
		if (amigos.isEmpty()) {
			System.out.println("\nNenhum amigo cadastrado... :(");
		} else {
			System.out.println("\n------------------------");
			System.out.println("|::::::: AMIGOS :::::::|");
			System.out.println("------------------------");
			System.out.println(toString());
			System.out.println("------------------------");
		}
	}
	
	/**
	 * Imprime as informações de um amigo em particular
	 * @param nome - nome do amigo a ser impresso
	 * */
	public void exibirAmigo(String nome) {
		
		List<Amigo> a;
		try {
			a = getAmigo(nome);
			
			System.out.println("\n---------------------------------");
			System.out.println("|::::: AMIGO EM PARTICULAR :::::|");
			System.out.println("---------------------------------\n");
			for (Amigo amigo : a) {
				System.out.println(amigo.toString() + "\n");
			}
			System.out.println("---------------------------------");
		} catch (AmigoNotFoundException e) {
			System.out.println("\nNenhum amigo cadastrado com esse nome... :(");
		}
	}
	
	/**
	 * Total de amigos cadastrados
	 * @return Total de amigos
	 * */
	public int totalDeAmigos() {
		return amigos.size();
	}
	
	/**
	 * Verifica se existe algum amigo cadastrado.
	 * @return True se existir ou False, caso contrário.
	 * */
	public boolean isVazio() {
		return amigos.isEmpty();
	}
	
	/**
	 * Recupera todos os amigos do usuário.
	 * @return Lista contendo os amigos.
	 * */
	public List<Amigo> todosAmigos() {
		return new ArrayList<>(amigos);
	}
}
